rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    match /ratings/{ratingId} {
      allow read: if true;
      allow write: if request.auth != null
                   && request.resource.data.userId == request.auth.uid;
    }

    match /rating_aggregates/{itemId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /strategies/{id} {
      allow read: if true;
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /activities/{id} {
      allow read: if true;
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update: if request.auth != null
                    && request.resource.data.currentParticipants is number
                    && request.resource.data.currentParticipants >= 0;
    }
    
    match /bookings/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
                     && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null
                     && resource.data.userId == request.auth.uid;
    }
    
    match /moodEntries/{id} {
      allow read: if request.auth != null
                   && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null
                     && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null
                     && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null
                     && resource.data.userId == request.auth.uid;
    }
  }
}